@page "/reportshandler/{ReportsHandlerId}"

@attribute [Authorize(Roles = RolesConstants.Administrator)]

@inject IReportsHandlerService reportsHandlerService
@inject ILocationService locationService
@inject NavigationManager navigationManager

<RadzenCard>
    @if (reportsHandler != null)
    {
        <div class="row">
            <div class="col-3" style="text-align: center">
                <div style="display: inline-block; margin: 0 auto;">
                    <RadzenImage Path="@reportsHandler.ImageUri" Style="border-radius: 50%; width: 100%; margin-bottom: 20px" />
                </div>
            </div>
            <div class="col-9" style="padding-left: 30px; padding-top: 10px">
                <h1>@reportsHandler.Name</h1>
                <div>
                    <div style="margin-bottom: 5px;">
                        <b>Email: </b>
                        <p>@reportsHandler.ApplicationUser.Email</p>
                    </div>
                    <div style="margin-bottom: 5px;">
                        <b>Phone: </b>
                        <p>@reportsHandler.ApplicationUser.PhoneNumber</p>
                    </div>
                    <div style="margin-bottom: 5px;">
                        <b>Districts: </b>
                        <div>
                            <RadzenDropDown @bind-Value="currentDistrictIds" Multiple="true" Data="districts" TextProperty="Name" ValueProperty="Id" />
                        </div>
                    </div>
                    <div style="margin-bottom: 5px;">
                        <b>Is active: </b>
                        <div>
                            <RadzenSwitch @bind-Value=@reportsHandler.IsActive Style="margin-bottom: 20px" />
                        </div>
                    </div>
                    <RadzenButton Text="Save changes" Click="UpdateReportsHandlerAsync"/>
                </div>
            </div>
        </div>
        <hr />
        <HandlerReportsStatistic Reports="reportsHandler.Reports"/>
    }
</RadzenCard>

@code {
    [Parameter]
    public string ReportsHandlerId { get; set; }

    private ReportsHandler reportsHandler;

    private IEnumerable<District> districts;
    private IEnumerable<Guid> currentDistrictIds;

    protected override async Task OnInitializedAsync()
    {
        var guidReportsHandlerId = Guid.Parse(ReportsHandlerId);
        reportsHandler = await reportsHandlerService.GetReportsHandlerAsync(Guid.Parse(ReportsHandlerId));

        districts = await locationService.GetDistrictsAsync();
        currentDistrictIds = reportsHandler.ReportsHandlerDistricts.Select(rhd => rhd.DistrictId);
    }

    private async Task UpdateReportsHandlerAsync()
    {
        await reportsHandlerService.UpdateReportsHandlerAsync(reportsHandler, currentDistrictIds);
        StateHasChanged();
    }
}
